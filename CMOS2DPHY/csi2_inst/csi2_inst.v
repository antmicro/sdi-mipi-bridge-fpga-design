//===========================================================================
// Verilog file generated by Clarity Designer    07/02/2020    13:15:17  
// Filename  : csi2_inst.v                                                
// IP package: CMOS to D-PHY 1.3                           
// Copyright(c) 2016 Lattice Semiconductor Corporation. All rights reserved. 
//===========================================================================

module csi2_inst #(

// Parameter for DCS support
  parameter	TX_GEAR         = 8,            // 8:1 gearing

//new parameter for resource optimization
parameter        TINIT_COUNT = "ON",

parameter        CLK_MODE = "HS_ONLY",

  parameter  VC             = 0,          // 2-bit Virtual channel number
  parameter  WC             = 3840,          // 16-bit Word Count in DPHY packet
  parameter DSI_FORMAT      = 0,
  parameter WORD_WIDTH	    = 24,
  // Parameters of Mixel TX DPHY PLL
  parameter CM          = 8'd196,    // (640 <= (pix_clk/(N*O))*M) <= 1500)                                              
  parameter CN          = 5'd16,    // (25 <= pix_clk/N <= 30)                                            
  parameter CO          = 2'd0,    // Refer to Mixel PLL Specs for valid values                                   
  parameter TX_FREQ_TGT	  = 111,  // Setting this parameter does not mean that design will 
                                                    // output the specified byte clock. This is just used as a 
                                                    // reference value inside the design. 
  parameter TINIT_VALUE   = 1000,  // This is clocked by TX byte clock 
  parameter ROM_WAIT_TIME = 1000 // of the Tx DPHY initialization                
) 
(
//------Common Interface Ports
  input       pix_clk_i,                // pixel or refclk clock
  input       reset_n_i,                // (active low) asynchronous reset
  input       pd_dphy_i,                // DPHY PD signal
  
//------Debug Signals available if MISC_ON is defined
  output      tinit_done_o,             // Tinit done  
  output      pll_lock_o,               // PLL clock lock signal

//------DSI Interface Ports

//------CSI Interface Ports
  input                  fv_i,          // frame valid input for CMOS i/f
  input                  lv_i,          // line valid input for CMOS i/f
  input                  dvalid_i,      // data valid
  input [WORD_WIDTH-1:0] pixdata_d0_i,  // pixel data for CMOS interface

// DPHY output ports
  inout                  d0_p_io,       //DPHY output data 0
  inout                  d0_n_io,       //DPHY output data 0
  inout                  d1_p_o,        //DPHY output data 1
  inout                  d1_n_o,        //DPHY output data 1
  inout                  clk_p_o,       // DPHY output clock
  inout                  clk_n_o        // DPHY output clock
);

// Parameters used when HS_DCS is defined
localparam LANE_WIDTH = 2;

//localparam TX_GEAR = 8; // GEAR8 is always selected for SIP7
localparam DAT_WIDTH = (TX_GEAR)*LANE_WIDTH;
localparam DCS_TRAIL_CYC = 0;
localparam DCSCMDCNT_WIDTH = 9;

// locally set inside CMOS2DPHY
// Expectation is data width is always 16*granularity
localparam DATA_WIDTH = 16;

// Additional wires for HS_DCS Support
wire hs_dcs_done_w;
wire [4*DATA_WIDTH-1:0]  dphy_pkt_hsdcs_w;
wire dphy_pkten_dcs_w;

wire [DAT_WIDTH:0] 	dcsrom_hs_data_d;
wire [DCSCMDCNT_WIDTH-1:0] dcsrom_hs_cmd_cnt;

wire tx_rom_done_hslp_w;
wire tx_rom_done_hs_w;
wire tx_rom_pkten_hs_w;
wire tx_rom_strt_hslp_w;
wire tx_rom_escape_hslp_w;
wire tx_rom_stop_hslp_w;
wire [7:0] tx_rom_data_hslp_w;
wire [4*DATA_WIDTH-1:0] tx_rom_pktdata_hs_w;

wire		dcs_clk;
wire [7:0]	data_w;
wire        byte_clk_w;
wire        start_w;
wire        escape_w;
wire        stop_w;
wire        rom_done_w;

wire d_hs_en;
wire dcs_hs_en;
wire dcs_hs_en_w;
wire d_hs_rdy;
wire pix_clk_w;
wire eclk_o;
wire [WORD_WIDTH*2-1:0] pixdata_d0_w;
wire [WORD_WIDTH-1:0]   pixdata_d0_dly;
wire de_dly_w;
wire [1:0] de_w;


// Logic for HS_DCS support
  assign tx_rom_done_hslp_w = rom_done_w;
  assign tx_rom_done_hs_w = 0;
  assign tx_rom_pkten_hs_w = 0;
  assign tx_rom_pktdata_hs_w = 0;
  assign tx_rom_strt_hslp_w = start_w;
  assign tx_rom_escape_hslp_w = escape_w;
  assign tx_rom_stop_hslp_w = stop_w;
  assign tx_rom_data_hslp_w = data_w;

//
   assign dcs_hs_en_w = 1'b0;

////added option to use Snow PLL to avoid frequency holes of Mixel PLL
wire       tx_refclk;
wire       pll_clkop;
wire       pll_lock;

       assign tx_refclk = pix_clk_i;
      assign pll_lock  = 1'b1;


//// Snow PLL


//----- CMOS2DPHY Instance
csi2_inst_cmos_2_dphy_ip # (
  //added for resource optimization
  .CLK_MODE          (CLK_MODE),
  .TINIT_COUNT       (TINIT_COUNT),
  //added for >150 MHz pixel clock support
  .VC                (VC),
  .WC                (WC),
  .CN                (CN),				
  .CM                (CM),		
  .CO                (CO),
  .TINIT_VALUE       (TINIT_VALUE),  
  .TX_FREQ_TGT       (TX_FREQ_TGT)
)
cmos_2_dphy_ip_inst(

////added ports for handshaking between Rx/bridge and Tx
  .clk_hs_en_i   (d_hs_en | dcs_hs_en_w),
  .d_hs_en_i     (d_hs_en | dcs_hs_en_w),
  .d_hs_rdy_o    (d_hs_rdy),
  .d_hs_en_o     (d_hs_en),
  
  .reset_n_i     (reset_n_i),
  .pix_clk_i     (pix_clk_i),
////Added separate port for Mixel PLL refclk, and Snow PLL lock  
  .ref_clk_i      (tx_refclk),
  .pll_lock_i    (pll_lock), 
  
  .byte_clk_o    (byte_clk_w),
  .pll_lock_o    (pll_lock_o),
  .tinit_done_o  (tinit_done_o),
  .core_clk_i    (byte_clk_w),
  .pd_dphy_i     (pd_dphy_i),
  .fv_i          (fv_i),
  .dvalid_i      (dvalid_i),
  .lv_i          (lv_i),
  .pixdata_d0_i  (pixdata_d0_i),
  .clk_p_o       (clk_p_o),
  .clk_n_o       (clk_n_o),
  .d0_p_io       (d0_p_io),
  .d0_n_io       (d0_n_io),
  .d1_p_o        (d1_p_o),
  .d1_n_o        (d1_n_o)
);



//======================================================================================
// Use 1:2 gearing logic for data and data enable to support >150 MHz 
// pixel clock input
// Waveform: 
//                       ___     ___     ___     ___     ___     ___     ___     ___
// pix_clk_i         ___|   |___|   |___|   |___|   |___|   |___|   |___|   |___|   |___
//                   _______ _______ _______ _______ _______ ___________________________
// pixdata_d0_i      __XX___|___D0__|___D1__|___D2__|___D3__|___________________________
//                           ___________________________________________________________
// lv_i/de_i         _______|
//                       _______         _______         _______         _______
// pix_clk_w (div2)  ___|       |_______|       |_______|       |_______|       |_______
//                   ___________________ _______________ _______________ _______________
// pixdata_d0_w      ___________________|_____D0_XX_____|_____D2_D1_____|_____XX_D3_____
//                   ___________________ _______________ _______________ _______________
// de_w              ___________________|______1_0______|______1_1______|______1_1______
//
//======================================================================================

/*synthesis translate_off*/
  GSR GSR_INST (.GSR (1'b1));  // only for simulation purposes
// not included in official release, only used to check for compile errors
  PUR PUR_INST (.PUR (1'b1));  // only for simulation purposes
/*synthesis translate_on*/

endmodule
