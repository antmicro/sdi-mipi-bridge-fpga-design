//===========================================================================
// Verilog file generated by Clarity Designer    07/02/2020    13:15:17  
// Filename  : csi2_inst_pattern_gen.v                                                
// IP package: CMOS to D-PHY 1.3                           
// Copyright(c) 2016 Lattice Semiconductor Corporation. All rights reserved. 
//===========================================================================

module csi2_inst_pattern_gen (
    input sys_clk,
	input sys_rst,
	input vsync_i,
	input hsync_i,
	output reg de_o,
	output reg [23:0] data_o,
	output reg fv_o,
	output reg lv_o

);

reg vsync_f;
reg vsync_r = 1'd0;
reg hsync_f;
reg hsync_r = 1'd0;
wire de_c;
reg [23:0] data_c;
wire fv_c;
reg fv_r = 1'd0;
wire lv_c;
reg lv_r = 1'd0;
reg [7:0] rstn_cnt_r = 8'd0;
reg [11:0] pixcnt_r = 12'd0;
reg [11:0] pixcnt_c;
reg [11:0] linecnt_r = 12'd0;
reg [11:0] linecnt_c;
reg [11:0] act_linecnt_r = 12'd0;
reg [11:0] act_linecnt_c = 12'd0;
reg [7:0] color_cnt_r = 8'd0;
reg [7:0] color_cnt_c;
reg lv_delay = 1'd0;
reg fv_delay = 1'd0;
reg [9:0] lv_delay_cnt = 10'd0;
reg [9:0] fv_extend_cnt = 10'd0;

// synthesis translate_off
reg dummy_s;
initial dummy_s <= 1'd0;
// synthesis translate_on


// synthesis translate_off
reg dummy_d;
// synthesis translate_on
always @(*) begin
	hsync_f <= 1'd0;
	if ((hsync_i & (~fv_delay))) begin
		hsync_f <= 1'd1;
	end else begin
		if (((~lv_c) & (~lv_delay))) begin
			hsync_f <= 1'd0;
		end else begin
			hsync_f <= hsync_r;
		end
	end
// synthesis translate_off
	dummy_d <= dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_1;
// synthesis translate_on
always @(*) begin
	pixcnt_c <= 12'd0;
	if ((hsync_i & (~fv_delay))) begin
		pixcnt_c <= 1'd0;
	end else begin
		if (lv_delay) begin
			pixcnt_c <= pixcnt_r;
		end else begin
			if ((pixcnt_r < 11'd1279)) begin
				pixcnt_c <= (pixcnt_r + 1'd1);
			end else begin
				pixcnt_c <= 1'd0;
			end
		end
	end
// synthesis translate_off
	dummy_d_1 <= dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_2;
// synthesis translate_on
always @(*) begin
	vsync_f <= 1'd0;
	linecnt_c <= 12'd0;
	if ((vsync_i & (~vsync_r))) begin
		vsync_f <= 1'd1;
		linecnt_c <= 10'd726;
	end else begin
		if ((vsync_i == 1'd0)) begin
			vsync_f <= 1'd0;
		end else begin
			vsync_f <= 1'd1;
		end
		if (lv_delay) begin
			linecnt_c <= linecnt_r;
		end else begin
			if (((linecnt_r < 10'd749) & (pixcnt_r == 11'd1279))) begin
				linecnt_c <= (linecnt_r + 1'd1);
			end else begin
				if (((linecnt_r == 10'd749) & (pixcnt_r == 11'd1279))) begin
					linecnt_c <= 1'd0;
				end else begin
					linecnt_c <= linecnt_r;
				end
			end
		end
	end
// synthesis translate_off
	dummy_d_2 <= dummy_s;
// synthesis translate_on
end
assign lv_c = ((((pixcnt_c > 1'd0) & (pixcnt_c <= 11'd1280)) & (linecnt_c >= 1'd0)) & (linecnt_c <= 10'd750));
assign fv_c = (((linecnt_c > 1'd0) & (linecnt_c <= 10'd721)) & (~fv_delay));
assign de_c = (lv_c & fv_c);

// synthesis translate_off
reg dummy_d_3;
// synthesis translate_on
always @(*) begin
	color_cnt_c <= 8'd0;
	if ((lv_r & fv_r)) begin
		color_cnt_c <= (color_cnt_r + 1'd1);
	end else begin
		color_cnt_c <= 1'd0;
	end
// synthesis translate_off
	dummy_d_3 <= dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_4;
// synthesis translate_on
always @(*) begin
	data_c <= 24'd0;
	if (1'd1) begin
		data_c <= {4{color_cnt_r}};
	end else begin
		if (((act_linecnt_r >= 1'd0) & (act_linecnt_r <= 8'd179))) begin
			data_c <= 8'd255;
		end else begin
			if (((act_linecnt_r >= 8'd180) & (act_linecnt_r <= 9'd359))) begin
				data_c <= 16'd65280;
			end else begin
				if (((act_linecnt_r >= 9'd360) & (act_linecnt_r <= 10'd539))) begin
					data_c <= 24'd16711680;
				end else begin
					data_c <= 24'd16777215;
				end
			end
		end
	end
// synthesis translate_off
	dummy_d_4 <= dummy_s;
// synthesis translate_on
end

always @(posedge sys_clk) begin
	if ((rstn_cnt_r[7] == 1'd0)) begin
		rstn_cnt_r <= (rstn_cnt_r + 1'd1);
	end
	if ((rstn_cnt_r[7] == 1'd0)) begin
		vsync_r <= 1'd0;
		hsync_r <= 1'd0;
		de_o <= 1'd0;
		data_o <= 1'd0;
		fv_o <= 1'd0;
		lv_o <= 1'd0;
		fv_r <= 1'd0;
		lv_r <= 1'd0;
		pixcnt_r <= 1'd0;
		linecnt_r <= 1'd0;
		act_linecnt_r <= 1'd0;
		color_cnt_r <= 1'd0;
	end else begin
		vsync_r <= vsync_f;
		hsync_r <= hsync_f;
		de_o <= de_c;
		data_o <= data_c;
		fv_o <= (fv_r | fv_c);
		lv_o <= ((lv_r | lv_c) & fv_c);
		fv_r <= fv_c;
		lv_r <= lv_c;
		pixcnt_r <= pixcnt_c;
		linecnt_r <= linecnt_c;
		act_linecnt_r <= act_linecnt_c;
		color_cnt_r <= color_cnt_c;
	end
	if (((hsync_i & (~hsync_r)) & (~fv_delay))) begin
		lv_delay_cnt <= 7'd110;
		lv_delay <= 1'd1;
	end else begin
		if (((rstn_cnt_r[7] == 1'd0) | (lv_delay_cnt == 9'd370))) begin
			lv_delay_cnt <= 1'd0;
			lv_delay <= 1'd0;
		end else begin
			if ((lv_c == 1'd0)) begin
				lv_delay_cnt <= (lv_delay_cnt + 1'd1);
				lv_delay <= 1'd1;
			end
		end
	end
	if (((rstn_cnt_r[7] == 1'd0) | (linecnt_c == 1'd1))) begin
		fv_extend_cnt <= 1'd0;
	end else begin
		if ((fv_extend_cnt == 9'd370)) begin
			fv_extend_cnt <= fv_extend_cnt;
		end else begin
			if (((linecnt_c == 10'd721) & (pixcnt_c == 1'd0))) begin
				fv_extend_cnt <= (fv_extend_cnt + 1'd1);
			end
		end
	end
	if ((((rstn_cnt_r[7] == 1'd0) | (linecnt_c == 1'd1)) | (fv_extend_cnt == 1'd0))) begin
		fv_delay <= 1'd0;
	end else begin
		if (((linecnt_c == 10'd721) & (fv_extend_cnt == 9'd370))) begin
			fv_delay <= 1'd1;
		end
	end
	if (~sys_rst) begin
		de_o <= 1'd0;
		data_o <= 24'd0;
		fv_o <= 1'd0;
		lv_o <= 1'd0;
		vsync_r <= 1'd0;
		hsync_r <= 1'd0;
		fv_r <= 1'd0;
		lv_r <= 1'd0;
		rstn_cnt_r <= 8'd0;
		pixcnt_r <= 12'd0;
		linecnt_r <= 12'd0;
		act_linecnt_r <= 12'd0;
		color_cnt_r <= 8'd0;
		lv_delay <= 1'd0;
		fv_delay <= 1'd0;
		lv_delay_cnt <= 10'd0;
		fv_extend_cnt <= 10'd0;
	end
end

endmodule
